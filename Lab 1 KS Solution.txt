__author__ = 'Cristal Ngo'

from MyQueue import MyQueue
from MyStack import MyStack
import string


dictionary = []

def readFromDictionary(fileName):
    global dictionary

    f = open(fileName, "r")
    for line in f:
        line = line.replace("\n", "", )
        line = line.lower()
        dictionary.append(line)
    dictionary = list(set(dictionary))
    dictionary.sort()
    f.close()

def findWords(firstWord, lastWord):
    global dictionary
    
    stack = MyStack()
    queue = MyQueue()
    restart = True
    
    queue.enqueue(firstWord)

    #testword = queue.dequeue()
    #print (testword)
    #print(queue.isEmpty())
    
    #testwordlist = list(testword)
    #testwordlist[0] = "a"
    #stack.copyFrom(testwordlist)
    #print(stack.toString());
    restartindex = 0
    
    while restart:
      
      restart = False
      
      #print("hello")
      if queue.size() > 0:
        testword = queue._data[queue.size()-1]
      else:
        print("Queue is empty")
        return -1
      
      print (testword)
      for i in range(restartindex,len(testword)):
      
        print(i)
        testwordlist = list(testword)
        
        original_char = testwordlist[i]
        
        for j in range(ord('a'), ord('z')+1):       
          
          testwordlist[i] = chr(j)
          stack.copyFrom(testwordlist)
          
          #print(stack.toString())
          
          if stack.toString() == lastWord:
            #print ("hello")
            return 0
          
          if stack.toString() in dictionary and stack.toString() not in queue._data:
            restart = True
            print (stack.data)
            queue.enqueue(stack.toString())
            print ('atone' in queue._data)
            break
          
          
          if restart == True and i > 0:
            i = i - 1
            break
          
          testwordlist[i] = original_char
        

    #---------------Enter your source code here----------------#
    #Print a shortest word ladder for the firstWord and lastWord and return 1 if such a ladder can be found
    #Return -1 if there exists no word ladder for the firstWord and lastWord

    return -1

def test(firstWord, lastWord):
    result = findWords(firstWord, lastWord)
    if result == -1: print("No Ladder for ", firstWord, "->", lastWord)


readFromDictionary('dictionary.txt')
test('stone','money')
#test('babies','sleepy')
#('devil','angel')
#test('monk','perl')
#test('blue','pink')
#test('heart','heart')
#test('slow', 'fast')
#test('atlas','zebra')
#test('babes','child')
#test('train','bikes')
#test('brewing','whiskey')
#test('men','can')
#test ('sail', 'ruin')
#More challenging test cases
#test('money','smart')
#test('mumbo','ghost')
#No solution test cases
#test('snow', 'stop')